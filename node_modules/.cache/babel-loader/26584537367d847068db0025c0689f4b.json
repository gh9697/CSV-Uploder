{"ast":null,"code":"/*\nCSV Parse\n\nPlease look at the [project documentation](https://csv.js.org/parse/) for\nadditional information.\n*/\nconst {\n  Transform\n} = require('stream');\n\nconst ResizeableBuffer = require('./ResizeableBuffer');\n\nconst tab = 9;\nconst nl = 10;\nconst np = 12;\nconst cr = 13;\nconst space = 32;\nconst boms = {\n  // Note, the following are equals:\n  // Buffer.from(\"\\ufeff\")\n  // Buffer.from([239, 187, 191])\n  // Buffer.from('EFBBBF', 'hex')\n  'utf8': Buffer.from([239, 187, 191]),\n  // Note, the following are equals:\n  // Buffer.from \"\\ufeff\", 'utf16le\n  // Buffer.from([255, 254])\n  'utf16le': Buffer.from([255, 254])\n};\n\nclass Parser extends Transform {\n  constructor(opts = {}) {\n    super({ ...{\n        readableObjectMode: true\n      },\n      ...opts,\n      encoding: null\n    });\n    this.__originalOptions = opts;\n\n    this.__normalizeOptions(opts);\n  }\n\n  __normalizeOptions(opts) {\n    const options = {}; // Merge with user options\n\n    for (let opt in opts) {\n      options[underscore(opt)] = opts[opt];\n    } // Normalize option `encoding`\n    // Note: defined first because other options depends on it\n    // to convert chars/strings into buffers.\n\n\n    if (options.encoding === undefined || options.encoding === true) {\n      options.encoding = 'utf8';\n    } else if (options.encoding === null || options.encoding === false) {\n      options.encoding = null;\n    } else if (typeof options.encoding !== 'string' && options.encoding !== null) {\n      throw new CsvError('CSV_INVALID_OPTION_ENCODING', ['Invalid option encoding:', 'encoding must be a string or null to return a buffer,', `got ${JSON.stringify(options.encoding)}`], options);\n    } // Normalize option `bom`\n\n\n    if (options.bom === undefined || options.bom === null || options.bom === false) {\n      options.bom = false;\n    } else if (options.bom !== true) {\n      throw new CsvError('CSV_INVALID_OPTION_BOM', ['Invalid option bom:', 'bom must be true,', `got ${JSON.stringify(options.bom)}`], options);\n    } // Normalize option `cast`\n\n\n    let fnCastField = null;\n\n    if (options.cast === undefined || options.cast === null || options.cast === false || options.cast === '') {\n      options.cast = undefined;\n    } else if (typeof options.cast === 'function') {\n      fnCastField = options.cast;\n      options.cast = true;\n    } else if (options.cast !== true) {\n      throw new CsvError('CSV_INVALID_OPTION_CAST', ['Invalid option cast:', 'cast must be true or a function,', `got ${JSON.stringify(options.cast)}`], options);\n    } // Normalize option `cast_date`\n\n\n    if (options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === '') {\n      options.cast_date = false;\n    } else if (options.cast_date === true) {\n      options.cast_date = function (value) {\n        const date = Date.parse(value);\n        return !isNaN(date) ? new Date(date) : value;\n      };\n    } else if (typeof options.cast_date !== 'function') {\n      throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', ['Invalid option cast_date:', 'cast_date must be true or a function,', `got ${JSON.stringify(options.cast_date)}`], options);\n    } // Normalize option `columns`\n\n\n    let fnFirstLineToHeaders = null;\n\n    if (options.columns === true) {\n      // Fields in the first line are converted as-is to columns\n      fnFirstLineToHeaders = undefined;\n    } else if (typeof options.columns === 'function') {\n      fnFirstLineToHeaders = options.columns;\n      options.columns = true;\n    } else if (Array.isArray(options.columns)) {\n      options.columns = normalizeColumnsArray(options.columns);\n    } else if (options.columns === undefined || options.columns === null || options.columns === false) {\n      options.columns = false;\n    } else {\n      throw new CsvError('CSV_INVALID_OPTION_COLUMNS', ['Invalid option columns:', 'expect an object, a function or true,', `got ${JSON.stringify(options.columns)}`], options);\n    } // Normalize option `columns_duplicates_to_array`\n\n\n    if (options.columns_duplicates_to_array === undefined || options.columns_duplicates_to_array === null || options.columns_duplicates_to_array === false) {\n      options.columns_duplicates_to_array = false;\n    } else if (options.columns_duplicates_to_array !== true) {\n      throw new CsvError('CSV_INVALID_OPTION_COLUMNS_DUPLICATES_TO_ARRAY', ['Invalid option columns_duplicates_to_array:', 'expect an boolean,', `got ${JSON.stringify(options.columns_duplicates_to_array)}`], options);\n    } // Normalize option `comment`\n\n\n    if (options.comment === undefined || options.comment === null || options.comment === false || options.comment === '') {\n      options.comment = null;\n    } else {\n      if (typeof options.comment === 'string') {\n        options.comment = Buffer.from(options.comment, options.encoding);\n      }\n\n      if (!Buffer.isBuffer(options.comment)) {\n        throw new CsvError('CSV_INVALID_OPTION_COMMENT', ['Invalid option comment:', 'comment must be a buffer or a string,', `got ${JSON.stringify(options.comment)}`], options);\n      }\n    } // Normalize option `delimiter`\n\n\n    const delimiter_json = JSON.stringify(options.delimiter);\n    if (!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter];\n\n    if (options.delimiter.length === 0) {\n      throw new CsvError('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', `got ${delimiter_json}`], options);\n    }\n\n    options.delimiter = options.delimiter.map(function (delimiter) {\n      if (delimiter === undefined || delimiter === null || delimiter === false) {\n        return Buffer.from(',', options.encoding);\n      }\n\n      if (typeof delimiter === 'string') {\n        delimiter = Buffer.from(delimiter, options.encoding);\n      }\n\n      if (!Buffer.isBuffer(delimiter) || delimiter.length === 0) {\n        throw new CsvError('CSV_INVALID_OPTION_DELIMITER', ['Invalid option delimiter:', 'delimiter must be a non empty string or buffer or array of string|buffer,', `got ${delimiter_json}`], options);\n      }\n\n      return delimiter;\n    }); // Normalize option `escape`\n\n    if (options.escape === undefined || options.escape === true) {\n      options.escape = Buffer.from('\"', options.encoding);\n    } else if (typeof options.escape === 'string') {\n      options.escape = Buffer.from(options.escape, options.encoding);\n    } else if (options.escape === null || options.escape === false) {\n      options.escape = null;\n    }\n\n    if (options.escape !== null) {\n      if (!Buffer.isBuffer(options.escape)) {\n        throw new Error(`Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`);\n      }\n    } // Normalize option `from`\n\n\n    if (options.from === undefined || options.from === null) {\n      options.from = 1;\n    } else {\n      if (typeof options.from === 'string' && /\\d+/.test(options.from)) {\n        options.from = parseInt(options.from);\n      }\n\n      if (Number.isInteger(options.from)) {\n        if (options.from < 0) {\n          throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`);\n        }\n      } else {\n        throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`);\n      }\n    } // Normalize option `from_line`\n\n\n    if (options.from_line === undefined || options.from_line === null) {\n      options.from_line = 1;\n    } else {\n      if (typeof options.from_line === 'string' && /\\d+/.test(options.from_line)) {\n        options.from_line = parseInt(options.from_line);\n      }\n\n      if (Number.isInteger(options.from_line)) {\n        if (options.from_line <= 0) {\n          throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`);\n        }\n      } else {\n        throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`);\n      }\n    } // Normalize option `info`\n\n\n    if (options.info === undefined || options.info === null || options.info === false) {\n      options.info = false;\n    } else if (options.info !== true) {\n      throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`);\n    } // Normalize option `max_record_size`\n\n\n    if (options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false) {\n      options.max_record_size = 0;\n    } else if (Number.isInteger(options.max_record_size) && options.max_record_size >= 0) {// Great, nothing to do\n    } else if (typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)) {\n      options.max_record_size = parseInt(options.max_record_size);\n    } else {\n      throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`);\n    } // Normalize option `objname`\n\n\n    if (options.objname === undefined || options.objname === null || options.objname === false) {\n      options.objname = undefined;\n    } else if (Buffer.isBuffer(options.objname)) {\n      if (options.objname.length === 0) {\n        throw new Error(`Invalid Option: objname must be a non empty buffer`);\n      }\n\n      if (options.encoding === null) {// Don't call `toString`, leave objname as a buffer\n      } else {\n        options.objname = options.objname.toString(options.encoding);\n      }\n    } else if (typeof options.objname === 'string') {\n      if (options.objname.length === 0) {\n        throw new Error(`Invalid Option: objname must be a non empty string`);\n      } // Great, nothing to do\n\n    } else {\n      throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`);\n    } // Normalize option `on_record`\n\n\n    if (options.on_record === undefined || options.on_record === null) {\n      options.on_record = undefined;\n    } else if (typeof options.on_record !== 'function') {\n      throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', ['Invalid option `on_record`:', 'expect a function,', `got ${JSON.stringify(options.on_record)}`], options);\n    } // Normalize option `quote`\n\n\n    if (options.quote === null || options.quote === false || options.quote === '') {\n      options.quote = null;\n    } else {\n      if (options.quote === undefined || options.quote === true) {\n        options.quote = Buffer.from('\"', options.encoding);\n      } else if (typeof options.quote === 'string') {\n        options.quote = Buffer.from(options.quote, options.encoding);\n      }\n\n      if (!Buffer.isBuffer(options.quote)) {\n        throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`);\n      }\n    } // Normalize option `raw`\n\n\n    if (options.raw === undefined || options.raw === null || options.raw === false) {\n      options.raw = false;\n    } else if (options.raw !== true) {\n      throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`);\n    } // Normalize option `record_delimiter`\n\n\n    if (!options.record_delimiter) {\n      options.record_delimiter = [];\n    } else if (!Array.isArray(options.record_delimiter)) {\n      options.record_delimiter = [options.record_delimiter];\n    }\n\n    options.record_delimiter = options.record_delimiter.map(function (rd) {\n      if (typeof rd === 'string') {\n        rd = Buffer.from(rd, options.encoding);\n      }\n\n      return rd;\n    }); // Normalize option `relax`\n\n    if (typeof options.relax === 'boolean') {// Great, nothing to do\n    } else if (options.relax === undefined || options.relax === null) {\n      options.relax = false;\n    } else {\n      throw new Error(`Invalid Option: relax must be a boolean, got ${JSON.stringify(options.relax)}`);\n    } // Normalize option `relax_column_count`\n\n\n    if (typeof options.relax_column_count === 'boolean') {// Great, nothing to do\n    } else if (options.relax_column_count === undefined || options.relax_column_count === null) {\n      options.relax_column_count = false;\n    } else {\n      throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`);\n    }\n\n    if (typeof options.relax_column_count_less === 'boolean') {// Great, nothing to do\n    } else if (options.relax_column_count_less === undefined || options.relax_column_count_less === null) {\n      options.relax_column_count_less = false;\n    } else {\n      throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`);\n    }\n\n    if (typeof options.relax_column_count_more === 'boolean') {// Great, nothing to do\n    } else if (options.relax_column_count_more === undefined || options.relax_column_count_more === null) {\n      options.relax_column_count_more = false;\n    } else {\n      throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`);\n    } // Normalize option `skip_empty_lines`\n\n\n    if (typeof options.skip_empty_lines === 'boolean') {// Great, nothing to do\n    } else if (options.skip_empty_lines === undefined || options.skip_empty_lines === null) {\n      options.skip_empty_lines = false;\n    } else {\n      throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`);\n    } // Normalize option `skip_lines_with_empty_values`\n\n\n    if (typeof options.skip_lines_with_empty_values === 'boolean') {// Great, nothing to do\n    } else if (options.skip_lines_with_empty_values === undefined || options.skip_lines_with_empty_values === null) {\n      options.skip_lines_with_empty_values = false;\n    } else {\n      throw new Error(`Invalid Option: skip_lines_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_lines_with_empty_values)}`);\n    } // Normalize option `skip_lines_with_error`\n\n\n    if (typeof options.skip_lines_with_error === 'boolean') {// Great, nothing to do\n    } else if (options.skip_lines_with_error === undefined || options.skip_lines_with_error === null) {\n      options.skip_lines_with_error = false;\n    } else {\n      throw new Error(`Invalid Option: skip_lines_with_error must be a boolean, got ${JSON.stringify(options.skip_lines_with_error)}`);\n    } // Normalize option `rtrim`\n\n\n    if (options.rtrim === undefined || options.rtrim === null || options.rtrim === false) {\n      options.rtrim = false;\n    } else if (options.rtrim !== true) {\n      throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`);\n    } // Normalize option `ltrim`\n\n\n    if (options.ltrim === undefined || options.ltrim === null || options.ltrim === false) {\n      options.ltrim = false;\n    } else if (options.ltrim !== true) {\n      throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`);\n    } // Normalize option `trim`\n\n\n    if (options.trim === undefined || options.trim === null || options.trim === false) {\n      options.trim = false;\n    } else if (options.trim !== true) {\n      throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`);\n    } // Normalize options `trim`, `ltrim` and `rtrim`\n\n\n    if (options.trim === true && opts.ltrim !== false) {\n      options.ltrim = true;\n    } else if (options.ltrim !== true) {\n      options.ltrim = false;\n    }\n\n    if (options.trim === true && opts.rtrim !== false) {\n      options.rtrim = true;\n    } else if (options.rtrim !== true) {\n      options.rtrim = false;\n    } // Normalize option `to`\n\n\n    if (options.to === undefined || options.to === null) {\n      options.to = -1;\n    } else {\n      if (typeof options.to === 'string' && /\\d+/.test(options.to)) {\n        options.to = parseInt(options.to);\n      }\n\n      if (Number.isInteger(options.to)) {\n        if (options.to <= 0) {\n          throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`);\n        }\n      } else {\n        throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`);\n      }\n    } // Normalize option `to_line`\n\n\n    if (options.to_line === undefined || options.to_line === null) {\n      options.to_line = -1;\n    } else {\n      if (typeof options.to_line === 'string' && /\\d+/.test(options.to_line)) {\n        options.to_line = parseInt(options.to_line);\n      }\n\n      if (Number.isInteger(options.to_line)) {\n        if (options.to_line <= 0) {\n          throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`);\n        }\n      } else {\n        throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`);\n      }\n    }\n\n    this.info = {\n      comment_lines: 0,\n      empty_lines: 0,\n      invalid_field_length: 0,\n      lines: 1,\n      records: 0\n    };\n    this.options = options;\n    this.state = {\n      bomSkipped: false,\n      castField: fnCastField,\n      commenting: false,\n      // Current error encountered by a record\n      error: undefined,\n      enabled: options.from_line === 1,\n      escaping: false,\n      // escapeIsQuote: options.escape === options.quote,\n      escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,\n      expectedRecordLength: options.columns === null ? 0 : options.columns.length,\n      field: new ResizeableBuffer(20),\n      firstLineToHeaders: fnFirstLineToHeaders,\n      info: Object.assign({}, this.info),\n      needMoreDataSize: Math.max( // Skip if the remaining buffer smaller than comment\n      options.comment !== null ? options.comment.length : 0, // Skip if the remaining buffer can be delimiter\n      ...options.delimiter.map(delimiter => delimiter.length), // Skip if the remaining buffer can be escape sequence\n      options.quote !== null ? options.quote.length : 0),\n      previousBuf: undefined,\n      quoting: false,\n      stop: false,\n      rawBuffer: new ResizeableBuffer(100),\n      record: [],\n      recordHasError: false,\n      record_length: 0,\n      recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 2 : Math.max(...options.record_delimiter.map(v => v.length)),\n      trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\\t', options.encoding)[0]],\n      wasQuoting: false,\n      wasRowDelimiter: false\n    };\n  } // Implementation of `Transform._transform`\n\n\n  _transform(buf, encoding, callback) {\n    if (this.state.stop === true) {\n      return;\n    }\n\n    const err = this.__parse(buf, false);\n\n    if (err !== undefined) {\n      this.state.stop = true;\n    }\n\n    callback(err);\n  } // Implementation of `Transform._flush`\n\n\n  _flush(callback) {\n    if (this.state.stop === true) {\n      return;\n    }\n\n    const err = this.__parse(undefined, true);\n\n    callback(err);\n  } // Central parser implementation\n\n\n  __parse(nextBuf, end) {\n    const {\n      bom,\n      comment,\n      escape,\n      from_line,\n      info,\n      ltrim,\n      max_record_size,\n      quote,\n      raw,\n      relax,\n      rtrim,\n      skip_empty_lines,\n      to,\n      to_line\n    } = this.options;\n    let {\n      record_delimiter\n    } = this.options;\n    const {\n      bomSkipped,\n      previousBuf,\n      rawBuffer,\n      escapeIsQuote\n    } = this.state;\n    let buf;\n\n    if (previousBuf === undefined) {\n      if (nextBuf === undefined) {\n        // Handle empty string\n        this.push(null);\n        return;\n      } else {\n        buf = nextBuf;\n      }\n    } else if (previousBuf !== undefined && nextBuf === undefined) {\n      buf = previousBuf;\n    } else {\n      buf = Buffer.concat([previousBuf, nextBuf]);\n    } // Handle UTF BOM\n\n\n    if (bomSkipped === false) {\n      if (bom === false) {\n        this.state.bomSkipped = true;\n      } else if (buf.length < 3) {\n        // No enough data\n        if (end === false) {\n          // Wait for more data\n          this.state.previousBuf = buf;\n          return;\n        }\n      } else {\n        for (let encoding in boms) {\n          if (boms[encoding].compare(buf, 0, boms[encoding].length) === 0) {\n            // Skip BOM\n            buf = buf.slice(boms[encoding].length); // Renormalize original options with the new encoding\n\n            this.__normalizeOptions({ ...this.__originalOptions,\n              encoding: encoding\n            });\n\n            break;\n          }\n        }\n\n        this.state.bomSkipped = true;\n      }\n    }\n\n    const bufLen = buf.length;\n    let pos;\n\n    for (pos = 0; pos < bufLen; pos++) {\n      // Ensure we get enough space to look ahead\n      // There should be a way to move this out of the loop\n      if (this.__needMoreData(pos, bufLen, end)) {\n        break;\n      }\n\n      if (this.state.wasRowDelimiter === true) {\n        this.info.lines++;\n\n        if (info === true && this.state.record.length === 0 && this.state.field.length === 0 && this.state.wasQuoting === false) {\n          this.state.info = Object.assign({}, this.info);\n        }\n\n        this.state.wasRowDelimiter = false;\n      }\n\n      if (to_line !== -1 && this.info.lines > to_line) {\n        this.state.stop = true;\n        this.push(null);\n        return;\n      } // Auto discovery of record_delimiter, unix, mac and windows supported\n\n\n      if (this.state.quoting === false && record_delimiter.length === 0) {\n        const record_delimiterCount = this.__autoDiscoverRowDelimiter(buf, pos);\n\n        if (record_delimiterCount) {\n          record_delimiter = this.options.record_delimiter;\n        }\n      }\n\n      const chr = buf[pos];\n\n      if (raw === true) {\n        rawBuffer.append(chr);\n      }\n\n      if ((chr === cr || chr === nl) && this.state.wasRowDelimiter === false) {\n        this.state.wasRowDelimiter = true;\n      } // Previous char was a valid escape char\n      // treat the current char as a regular char\n\n\n      if (this.state.escaping === true) {\n        this.state.escaping = false;\n      } else {\n        // Escape is only active inside quoted fields\n        // We are quoting, the char is an escape chr and there is a chr to escape\n        // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n        if (escape !== null && this.state.quoting === true && this.__isEscape(buf, pos, chr) && pos + escape.length < bufLen) {\n          if (escapeIsQuote) {\n            if (this.__isQuote(buf, pos + escape.length)) {\n              this.state.escaping = true;\n              pos += escape.length - 1;\n              continue;\n            }\n          } else {\n            this.state.escaping = true;\n            pos += escape.length - 1;\n            continue;\n          }\n        } // Not currently escaping and chr is a quote\n        // TODO: need to compare bytes instead of single char\n\n\n        if (this.state.commenting === false && this.__isQuote(buf, pos)) {\n          if (this.state.quoting === true) {\n            const nextChr = buf[pos + quote.length];\n\n            const isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr);\n\n            const isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos + quote.length, nextChr);\n\n            const isNextChrDelimiter = this.__isDelimiter(buf, pos + quote.length, nextChr);\n\n            const isNextChrRowDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRowDelimiter(buf, pos + quote.length) : this.__isRecordDelimiter(nextChr, buf, pos + quote.length); // Escape a quote\n            // Treat next char as a regular character\n\n            if (escape !== null && this.__isEscape(buf, pos, chr) && this.__isQuote(buf, pos + escape.length)) {\n              pos += escape.length - 1;\n            } else if (!nextChr || isNextChrDelimiter || isNextChrRowDelimiter || isNextChrComment || isNextChrTrimable) {\n              this.state.quoting = false;\n              this.state.wasQuoting = true;\n              pos += quote.length - 1;\n              continue;\n            } else if (relax === false) {\n              const err = this.__error(new CsvError('CSV_INVALID_CLOSING_QUOTE', ['Invalid Closing Quote:', `got \"${String.fromCharCode(nextChr)}\"`, `at line ${this.info.lines}`, 'instead of delimiter, row delimiter, trimable character', '(if activated) or comment'], this.options, this.__context()));\n\n              if (err !== undefined) return err;\n            } else {\n              this.state.quoting = false;\n              this.state.wasQuoting = true;\n              this.state.field.prepend(quote);\n              pos += quote.length - 1;\n            }\n          } else {\n            if (this.state.field.length !== 0) {\n              // In relax mode, treat opening quote preceded by chrs as regular\n              if (relax === false) {\n                const err = this.__error(new CsvError('INVALID_OPENING_QUOTE', ['Invalid Opening Quote:', `a quote is found inside a field at line ${this.info.lines}`], this.options, this.__context(), {\n                  field: this.state.field\n                }));\n\n                if (err !== undefined) return err;\n              }\n            } else {\n              this.state.quoting = true;\n              pos += quote.length - 1;\n              continue;\n            }\n          }\n        }\n\n        if (this.state.quoting === false) {\n          let recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos);\n\n          if (recordDelimiterLength !== 0) {\n            // Do not emit comments which take a full line\n            const skipCommentLine = this.state.commenting && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0;\n\n            if (skipCommentLine) {\n              this.info.comment_lines++; // Skip full comment line\n            } else {\n              // Skip if line is empty and skip_empty_lines activated\n              if (skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0) {\n                this.info.empty_lines++;\n                pos += recordDelimiterLength - 1;\n                continue;\n              } // Activate records emition if above from_line\n\n\n              if (this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1 : 0) >= from_line) {\n                this.state.enabled = true;\n\n                this.__resetField();\n\n                this.__resetRow();\n\n                pos += recordDelimiterLength - 1;\n                continue;\n              } else {\n                const errField = this.__onField();\n\n                if (errField !== undefined) return errField;\n\n                const errRecord = this.__onRow();\n\n                if (errRecord !== undefined) return errRecord;\n              }\n\n              if (to !== -1 && this.info.records >= to) {\n                this.state.stop = true;\n                this.push(null);\n                return;\n              }\n            }\n\n            this.state.commenting = false;\n            pos += recordDelimiterLength - 1;\n            continue;\n          }\n\n          if (this.state.commenting) {\n            continue;\n          }\n\n          const commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr);\n\n          if (commentCount !== 0) {\n            this.state.commenting = true;\n            continue;\n          }\n\n          let delimiterLength = this.__isDelimiter(buf, pos, chr);\n\n          if (delimiterLength !== 0) {\n            const errField = this.__onField();\n\n            if (errField !== undefined) return errField;\n            pos += delimiterLength - 1;\n            continue;\n          }\n        }\n      }\n\n      if (this.state.commenting === false) {\n        if (max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size) {\n          const err = this.__error(new CsvError('CSV_MAX_RECORD_SIZE', ['Max Record Size:', 'record exceed the maximum number of tolerated bytes', `of ${max_record_size}`, `at line ${this.info.lines}`], this.options, this.__context()));\n\n          if (err !== undefined) return err;\n        }\n      }\n\n      const lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(chr); // rtrim in non quoting is handle in __onField\n\n      const rappend = rtrim === false || this.state.wasQuoting === false;\n\n      if (lappend === true && rappend === true) {\n        this.state.field.append(chr);\n      } else if (rtrim === true && !this.__isCharTrimable(chr)) {\n        const err = this.__error(new CsvError('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', ['Invalid Closing Quote:', 'found non trimable byte after quote', `at line ${this.info.lines}`], this.options, this.__context()));\n\n        if (err !== undefined) return err;\n      }\n    }\n\n    if (end === true) {\n      // Ensure we are not ending in a quoting state\n      if (this.state.quoting === true) {\n        const err = this.__error(new CsvError('CSV_QUOTE_NOT_CLOSED', ['Quote Not Closed:', `the parsing is finished with an opening quote at line ${this.info.lines}`], this.options, this.__context()));\n\n        if (err !== undefined) return err;\n      } else {\n        // Skip last line if it has no characters\n        if (this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0) {\n          const errField = this.__onField();\n\n          if (errField !== undefined) return errField;\n\n          const errRecord = this.__onRow();\n\n          if (errRecord !== undefined) return errRecord;\n        } else if (this.state.wasRowDelimiter === true) {\n          this.info.empty_lines++;\n        } else if (this.state.commenting === true) {\n          this.info.comment_lines++;\n        }\n      }\n    } else {\n      this.state.previousBuf = buf.slice(pos);\n    }\n\n    if (this.state.wasRowDelimiter === true) {\n      this.info.lines++;\n      this.state.wasRowDelimiter = false;\n    }\n  } // Helper to test if a character is a space or a line delimiter\n\n\n  __isCharTrimable(chr) {\n    return chr === space || chr === tab || chr === cr || chr === nl || chr === np;\n  }\n\n  __onRow() {\n    const {\n      columns,\n      columns_duplicates_to_array,\n      encoding,\n      info,\n      from,\n      relax_column_count,\n      relax_column_count_less,\n      relax_column_count_more,\n      raw,\n      skip_lines_with_empty_values\n    } = this.options;\n    const {\n      enabled,\n      record\n    } = this.state;\n\n    if (enabled === false) {\n      return this.__resetRow();\n    } // Convert the first line into column names\n\n\n    const recordLength = record.length;\n\n    if (columns === true) {\n      if (isRecordEmpty(record)) {\n        this.__resetRow();\n\n        return;\n      }\n\n      return this.__firstLineToColumns(record);\n    }\n\n    if (columns === false && this.info.records === 0) {\n      this.state.expectedRecordLength = recordLength;\n    }\n\n    if (recordLength !== this.state.expectedRecordLength) {\n      const err = columns === false ? // Todo: rename CSV_INCONSISTENT_RECORD_LENGTH to\n      // CSV_RECORD_INCONSISTENT_FIELDS_LENGTH\n      new CsvError('CSV_INCONSISTENT_RECORD_LENGTH', ['Invalid Record Length:', `expect ${this.state.expectedRecordLength},`, `got ${recordLength} on line ${this.info.lines}`], this.options, this.__context(), {\n        record: record\n      }) : // Todo: rename CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH to\n      // CSV_RECORD_INCONSISTENT_COLUMNS\n      new CsvError('CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH', ['Invalid Record Length:', `columns length is ${columns.length},`, // rename columns\n      `got ${recordLength} on line ${this.info.lines}`], this.options, this.__context(), {\n        record: record\n      });\n\n      if (relax_column_count === true || relax_column_count_less === true && recordLength < this.state.expectedRecordLength || relax_column_count_more === true && recordLength > this.state.expectedRecordLength) {\n        this.info.invalid_field_length++;\n        this.state.error = err; // Error is undefined with skip_lines_with_error\n      } else {\n        const finalErr = this.__error(err);\n\n        if (finalErr) return finalErr;\n      }\n    }\n\n    if (skip_lines_with_empty_values === true) {\n      if (isRecordEmpty(record)) {\n        this.__resetRow();\n\n        return;\n      }\n    }\n\n    if (this.state.recordHasError === true) {\n      this.__resetRow();\n\n      this.state.recordHasError = false;\n      return;\n    }\n\n    this.info.records++;\n\n    if (from === 1 || this.info.records >= from) {\n      if (columns !== false) {\n        const obj = {}; // Transform record array to an object\n\n        for (let i = 0, l = record.length; i < l; i++) {\n          if (columns[i] === undefined || columns[i].disabled) continue; // Turn duplicate columns into an array\n\n          if (columns_duplicates_to_array === true && obj[columns[i].name]) {\n            if (Array.isArray(obj[columns[i].name])) {\n              obj[columns[i].name] = obj[columns[i].name].concat(record[i]);\n            } else {\n              obj[columns[i].name] = [obj[columns[i].name], record[i]];\n            }\n          } else {\n            obj[columns[i].name] = record[i];\n          }\n        }\n\n        const {\n          objname\n        } = this.options;\n\n        if (objname === undefined) {\n          if (raw === true || info === true) {\n            const err = this.__push(Object.assign({\n              record: obj\n            }, raw === true ? {\n              raw: this.state.rawBuffer.toString(encoding)\n            } : {}, info === true ? {\n              info: this.state.info\n            } : {}));\n\n            if (err) {\n              return err;\n            }\n          } else {\n            const err = this.__push(obj);\n\n            if (err) {\n              return err;\n            }\n          }\n        } else {\n          if (raw === true || info === true) {\n            const err = this.__push(Object.assign({\n              record: [obj[objname], obj]\n            }, raw === true ? {\n              raw: this.state.rawBuffer.toString(encoding)\n            } : {}, info === true ? {\n              info: this.state.info\n            } : {}));\n\n            if (err) {\n              return err;\n            }\n          } else {\n            const err = this.__push([obj[objname], obj]);\n\n            if (err) {\n              return err;\n            }\n          }\n        }\n      } else {\n        if (raw === true || info === true) {\n          const err = this.__push(Object.assign({\n            record: record\n          }, raw === true ? {\n            raw: this.state.rawBuffer.toString(encoding)\n          } : {}, info === true ? {\n            info: this.state.info\n          } : {}));\n\n          if (err) {\n            return err;\n          }\n        } else {\n          const err = this.__push(record);\n\n          if (err) {\n            return err;\n          }\n        }\n      }\n    }\n\n    this.__resetRow();\n  }\n\n  __firstLineToColumns(record) {\n    const {\n      firstLineToHeaders\n    } = this.state;\n\n    try {\n      const headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record);\n\n      if (!Array.isArray(headers)) {\n        return this.__error(new CsvError('CSV_INVALID_COLUMN_MAPPING', ['Invalid Column Mapping:', 'expect an array from column function,', `got ${JSON.stringify(headers)}`], this.options, this.__context(), {\n          headers: headers\n        }));\n      }\n\n      const normalizedHeaders = normalizeColumnsArray(headers);\n      this.state.expectedRecordLength = normalizedHeaders.length;\n      this.options.columns = normalizedHeaders;\n\n      this.__resetRow();\n\n      return;\n    } catch (err) {\n      return err;\n    }\n  }\n\n  __resetRow() {\n    if (this.options.raw === true) {\n      this.state.rawBuffer.reset();\n    }\n\n    this.state.error = undefined;\n    this.state.record = [];\n    this.state.record_length = 0;\n  }\n\n  __onField() {\n    const {\n      cast,\n      encoding,\n      rtrim,\n      max_record_size\n    } = this.options;\n    const {\n      enabled,\n      wasQuoting\n    } = this.state; // Short circuit for the from_line options\n\n    if (enabled === false) {\n      /* this.options.columns !== true && */\n      return this.__resetField();\n    }\n\n    let field = this.state.field.toString(encoding);\n\n    if (rtrim === true && wasQuoting === false) {\n      field = field.trimRight();\n    }\n\n    if (cast === true) {\n      const [err, f] = this.__cast(field);\n\n      if (err !== undefined) return err;\n      field = f;\n    }\n\n    this.state.record.push(field); // Increment record length if record size must not exceed a limit\n\n    if (max_record_size !== 0 && typeof field === 'string') {\n      this.state.record_length += field.length;\n    }\n\n    this.__resetField();\n  }\n\n  __resetField() {\n    this.state.field.reset();\n    this.state.wasQuoting = false;\n  }\n\n  __push(record) {\n    const {\n      on_record\n    } = this.options;\n\n    if (on_record !== undefined) {\n      const context = this.__context();\n\n      try {\n        record = on_record.call(null, record, context);\n      } catch (err) {\n        return err;\n      }\n\n      if (record === undefined || record === null) {\n        return;\n      }\n    }\n\n    this.push(record);\n  } // Return a tuple with the error and the casted value\n\n\n  __cast(field) {\n    const {\n      columns,\n      relax_column_count\n    } = this.options;\n    const isColumns = Array.isArray(columns); // Dont loose time calling cast\n    // because the final record is an object\n    // and this field can't be associated to a key present in columns\n\n    if (isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length) {\n      return [undefined, undefined];\n    }\n\n    const context = this.__context();\n\n    if (this.state.castField !== null) {\n      try {\n        return [undefined, this.state.castField.call(null, field, context)];\n      } catch (err) {\n        return [err];\n      }\n    }\n\n    if (this.__isFloat(field)) {\n      return [undefined, parseFloat(field)];\n    } else if (this.options.cast_date !== false) {\n      return [undefined, this.options.cast_date.call(null, field, context)];\n    }\n\n    return [undefined, field];\n  } // Keep it in case we implement the `cast_int` option\n  // __isInt(value){\n  //   // return Number.isInteger(parseInt(value))\n  //   // return !isNaN( parseInt( obj ) );\n  //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n  // }\n\n\n  __isFloat(value) {\n    return value - parseFloat(value) + 1 >= 0; // Borrowed from jquery\n  }\n\n  __compareBytes(sourceBuf, targetBuf, targetPos, firstByte) {\n    if (sourceBuf[0] !== firstByte) return 0;\n    const sourceLength = sourceBuf.length;\n\n    for (let i = 1; i < sourceLength; i++) {\n      if (sourceBuf[i] !== targetBuf[targetPos + i]) return 0;\n    }\n\n    return sourceLength;\n  }\n\n  __needMoreData(i, bufLen, end) {\n    if (end) return false;\n    const {\n      quote\n    } = this.options;\n    const {\n      quoting,\n      needMoreDataSize,\n      recordDelimiterMaxLength\n    } = this.state;\n    const numOfCharLeft = bufLen - i - 1;\n    const requiredLength = Math.max(needMoreDataSize, // Skip if the remaining buffer smaller than record delimiter\n    recordDelimiterMaxLength, // Skip if the remaining buffer can be row delimiter following the closing quote\n    // 1 is for quote.length\n    quoting ? quote.length + recordDelimiterMaxLength : 0);\n    return numOfCharLeft < requiredLength;\n  }\n\n  __isDelimiter(buf, pos, chr) {\n    const {\n      delimiter\n    } = this.options;\n\n    loop1: for (let i = 0; i < delimiter.length; i++) {\n      const del = delimiter[i];\n\n      if (del[0] === chr) {\n        for (let j = 1; j < del.length; j++) {\n          if (del[j] !== buf[pos + j]) continue loop1;\n        }\n\n        return del.length;\n      }\n    }\n\n    return 0;\n  }\n\n  __isRecordDelimiter(chr, buf, pos) {\n    const {\n      record_delimiter\n    } = this.options;\n    const recordDelimiterLength = record_delimiter.length;\n\n    loop1: for (let i = 0; i < recordDelimiterLength; i++) {\n      const rd = record_delimiter[i];\n      const rdLength = rd.length;\n\n      if (rd[0] !== chr) {\n        continue;\n      }\n\n      for (let j = 1; j < rdLength; j++) {\n        if (rd[j] !== buf[pos + j]) {\n          continue loop1;\n        }\n      }\n\n      return rd.length;\n    }\n\n    return 0;\n  }\n\n  __isEscape(buf, pos, chr) {\n    const {\n      escape\n    } = this.options;\n    if (escape === null) return false;\n    const l = escape.length;\n\n    if (escape[0] === chr) {\n      for (let i = 0; i < l; i++) {\n        if (escape[i] !== buf[pos + i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  __isQuote(buf, pos) {\n    const {\n      quote\n    } = this.options;\n    if (quote === null) return false;\n    const l = quote.length;\n\n    for (let i = 0; i < l; i++) {\n      if (quote[i] !== buf[pos + i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  __autoDiscoverRowDelimiter(buf, pos) {\n    const {\n      encoding\n    } = this.options;\n    const chr = buf[pos];\n\n    if (chr === cr) {\n      if (buf[pos + 1] === nl) {\n        this.options.record_delimiter.push(Buffer.from('\\r\\n', encoding));\n        this.state.recordDelimiterMaxLength = 2;\n        return 2;\n      } else {\n        this.options.record_delimiter.push(Buffer.from('\\r', encoding));\n        this.state.recordDelimiterMaxLength = 1;\n        return 1;\n      }\n    } else if (chr === nl) {\n      this.options.record_delimiter.push(Buffer.from('\\n', encoding));\n      this.state.recordDelimiterMaxLength = 1;\n      return 1;\n    }\n\n    return 0;\n  }\n\n  __error(msg) {\n    const {\n      skip_lines_with_error\n    } = this.options;\n    const err = typeof msg === 'string' ? new Error(msg) : msg;\n\n    if (skip_lines_with_error) {\n      this.state.recordHasError = true;\n      this.emit('skip', err);\n      return undefined;\n    } else {\n      return err;\n    }\n  }\n\n  __context() {\n    const {\n      columns\n    } = this.options;\n    const isColumns = Array.isArray(columns);\n    return {\n      column: isColumns === true ? columns.length > this.state.record.length ? columns[this.state.record.length].name : null : this.state.record.length,\n      empty_lines: this.info.empty_lines,\n      error: this.state.error,\n      header: columns === true,\n      index: this.state.record.length,\n      invalid_field_length: this.info.invalid_field_length,\n      quoting: this.state.wasQuoting,\n      lines: this.info.lines,\n      records: this.info.records\n    };\n  }\n\n}\n\nconst parse = function () {\n  let data, options, callback;\n\n  for (let i in arguments) {\n    const argument = arguments[i];\n    const type = typeof argument;\n\n    if (data === undefined && (typeof argument === 'string' || Buffer.isBuffer(argument))) {\n      data = argument;\n    } else if (options === undefined && isObject(argument)) {\n      options = argument;\n    } else if (callback === undefined && type === 'function') {\n      callback = argument;\n    } else {\n      throw new CsvError('CSV_INVALID_ARGUMENT', ['Invalid argument:', `got ${JSON.stringify(argument)} at index ${i}`], this.options);\n    }\n  }\n\n  const parser = new Parser(options);\n\n  if (callback) {\n    const records = options === undefined || options.objname === undefined ? [] : {};\n    parser.on('readable', function () {\n      let record;\n\n      while ((record = this.read()) !== null) {\n        if (options === undefined || options.objname === undefined) {\n          records.push(record);\n        } else {\n          records[record[0]] = record[1];\n        }\n      }\n    });\n    parser.on('error', function (err) {\n      callback(err, undefined, parser.info);\n    });\n    parser.on('end', function () {\n      callback(undefined, records, parser.info);\n    });\n  }\n\n  if (data !== undefined) {\n    // Give a chance for events to be registered later\n    if (typeof setImmediate === 'function') {\n      setImmediate(function () {\n        parser.write(data);\n        parser.end();\n      });\n    } else {\n      parser.write(data);\n      parser.end();\n    }\n  }\n\n  return parser;\n};\n\nclass CsvError extends Error {\n  constructor(code, message, options, ...contexts) {\n    if (Array.isArray(message)) message = message.join(' ');\n    super(message);\n\n    if (Error.captureStackTrace !== undefined) {\n      Error.captureStackTrace(this, CsvError);\n    }\n\n    this.code = code;\n\n    for (const context of contexts) {\n      for (const key in context) {\n        const value = context[key];\n        this[key] = Buffer.isBuffer(value) ? value.toString(options.encoding) : value == null ? value : JSON.parse(JSON.stringify(value));\n      }\n    }\n  }\n\n}\n\nparse.Parser = Parser;\nparse.CsvError = CsvError;\nmodule.exports = parse;\n\nconst underscore = function (str) {\n  return str.replace(/([A-Z])/g, function (_, match) {\n    return '_' + match.toLowerCase();\n  });\n};\n\nconst isObject = function (obj) {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n};\n\nconst isRecordEmpty = function (record) {\n  return record.every(field => field == null || field.toString && field.toString().trim() === '');\n};\n\nconst normalizeColumnsArray = function (columns) {\n  const normalizedColumns = [];\n\n  for (let i = 0, l = columns.length; i < l; i++) {\n    const column = columns[i];\n\n    if (column === undefined || column === null || column === false) {\n      normalizedColumns[i] = {\n        disabled: true\n      };\n    } else if (typeof column === 'string') {\n      normalizedColumns[i] = {\n        name: column\n      };\n    } else if (isObject(column)) {\n      if (typeof column.name !== 'string') {\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', ['Option columns missing name:', `property \"name\" is required at position ${i}`, 'when column is an object literal']);\n      }\n\n      normalizedColumns[i] = column;\n    } else {\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', ['Invalid column definition:', 'expect a string or a literal object,', `got ${JSON.stringify(column)} at position ${i}`]);\n    }\n  }\n\n  return normalizedColumns;\n};","map":{"version":3,"sources":["/home/henil-acespritech/workspace/React/csv_uploader/node_modules/csv-parse/lib/index.js"],"names":["Transform","require","ResizeableBuffer","tab","nl","np","cr","space","boms","Buffer","from","Parser","constructor","opts","readableObjectMode","encoding","__originalOptions","__normalizeOptions","options","opt","underscore","undefined","CsvError","JSON","stringify","bom","fnCastField","cast","cast_date","value","date","Date","parse","isNaN","fnFirstLineToHeaders","columns","Array","isArray","normalizeColumnsArray","columns_duplicates_to_array","comment","isBuffer","delimiter_json","delimiter","length","map","escape","Error","test","parseInt","Number","isInteger","from_line","info","max_record_size","objname","toString","on_record","quote","raw","record_delimiter","rd","relax","relax_column_count","relax_column_count_less","relax_column_count_more","skip_empty_lines","skip_lines_with_empty_values","skip_lines_with_error","rtrim","ltrim","trim","to","to_line","comment_lines","empty_lines","invalid_field_length","lines","records","state","bomSkipped","castField","commenting","error","enabled","escaping","escapeIsQuote","compare","expectedRecordLength","field","firstLineToHeaders","Object","assign","needMoreDataSize","Math","max","previousBuf","quoting","stop","rawBuffer","record","recordHasError","record_length","recordDelimiterMaxLength","v","trimChars","wasQuoting","wasRowDelimiter","_transform","buf","callback","err","__parse","_flush","nextBuf","end","push","concat","slice","bufLen","pos","__needMoreData","record_delimiterCount","__autoDiscoverRowDelimiter","chr","append","__isEscape","__isQuote","nextChr","isNextChrTrimable","__isCharTrimable","isNextChrComment","__compareBytes","isNextChrDelimiter","__isDelimiter","isNextChrRowDelimiter","__isRecordDelimiter","__error","String","fromCharCode","__context","prepend","recordDelimiterLength","skipCommentLine","__resetField","__resetRow","errField","__onField","errRecord","__onRow","commentCount","delimiterLength","lappend","rappend","recordLength","isRecordEmpty","__firstLineToColumns","finalErr","obj","i","l","disabled","name","__push","headers","call","normalizedHeaders","reset","trimRight","f","__cast","context","isColumns","__isFloat","parseFloat","sourceBuf","targetBuf","targetPos","firstByte","sourceLength","numOfCharLeft","requiredLength","loop1","del","j","rdLength","msg","emit","column","header","index","data","arguments","argument","type","isObject","parser","on","read","setImmediate","write","code","message","contexts","join","captureStackTrace","key","module","exports","str","replace","_","match","toLowerCase","every","normalizedColumns"],"mappings":"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","sourcesContent":["\n/*\nCSV Parse\n\nPlease look at the [project documentation](https://csv.js.org/parse/) for\nadditional information.\n*/\n\nconst { Transform } = require('stream')\nconst ResizeableBuffer = require('./ResizeableBuffer')\n\nconst tab = 9\nconst nl = 10\nconst np = 12\nconst cr = 13\nconst space = 32\nconst boms = {\n  // Note, the following are equals:\n  // Buffer.from(\"\\ufeff\")\n  // Buffer.from([239, 187, 191])\n  // Buffer.from('EFBBBF', 'hex')\n  'utf8': Buffer.from([239, 187, 191]),\n  // Note, the following are equals:\n  // Buffer.from \"\\ufeff\", 'utf16le\n  // Buffer.from([255, 254])\n  'utf16le': Buffer.from([255, 254])\n}\n\nclass Parser extends Transform {\n  constructor(opts = {}){\n    super({...{readableObjectMode: true}, ...opts, encoding: null})\n    this.__originalOptions = opts\n    this.__normalizeOptions(opts)\n  }\n  __normalizeOptions(opts){\n    const options = {}\n    // Merge with user options\n    for(let opt in opts){\n      options[underscore(opt)] = opts[opt]\n    }\n    // Normalize option `encoding`\n    // Note: defined first because other options depends on it\n    // to convert chars/strings into buffers.\n    if(options.encoding === undefined || options.encoding === true){\n      options.encoding = 'utf8'\n    }else if(options.encoding === null || options.encoding === false){\n      options.encoding = null\n    }else if(typeof options.encoding !== 'string' && options.encoding !== null){\n      throw new CsvError('CSV_INVALID_OPTION_ENCODING', [\n        'Invalid option encoding:',\n        'encoding must be a string or null to return a buffer,',\n        `got ${JSON.stringify(options.encoding)}`\n      ], options)\n    }\n    // Normalize option `bom`\n    if(options.bom === undefined || options.bom === null || options.bom === false){\n      options.bom = false\n    }else if(options.bom !== true){\n      throw new CsvError('CSV_INVALID_OPTION_BOM', [\n        'Invalid option bom:', 'bom must be true,',\n        `got ${JSON.stringify(options.bom)}`\n      ], options)\n    }\n    // Normalize option `cast`\n    let fnCastField = null\n    if(options.cast === undefined || options.cast === null || options.cast === false || options.cast === ''){\n      options.cast = undefined\n    }else if(typeof options.cast === 'function'){\n      fnCastField = options.cast\n      options.cast = true\n    }else if(options.cast !== true){\n      throw new CsvError('CSV_INVALID_OPTION_CAST', [\n        'Invalid option cast:', 'cast must be true or a function,',\n        `got ${JSON.stringify(options.cast)}`\n      ], options)\n    }\n    // Normalize option `cast_date`\n    if(options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === ''){\n      options.cast_date = false\n    }else if(options.cast_date === true){\n      options.cast_date = function(value){\n        const date = Date.parse(value)\n        return !isNaN(date) ? new Date(date) : value\n      }\n    }else if(typeof options.cast_date !== 'function'){\n      throw new CsvError('CSV_INVALID_OPTION_CAST_DATE', [\n        'Invalid option cast_date:', 'cast_date must be true or a function,',\n        `got ${JSON.stringify(options.cast_date)}`\n      ], options)\n    }\n    // Normalize option `columns`\n    let fnFirstLineToHeaders = null\n    if(options.columns === true){\n      // Fields in the first line are converted as-is to columns\n      fnFirstLineToHeaders = undefined\n    }else if(typeof options.columns === 'function'){\n      fnFirstLineToHeaders = options.columns\n      options.columns = true\n    }else if(Array.isArray(options.columns)){\n      options.columns = normalizeColumnsArray(options.columns)\n    }else if(options.columns === undefined || options.columns === null || options.columns === false){\n      options.columns = false\n    }else{\n      throw new CsvError('CSV_INVALID_OPTION_COLUMNS', [\n        'Invalid option columns:',\n        'expect an object, a function or true,',\n        `got ${JSON.stringify(options.columns)}`\n      ], options)\n    }\n    // Normalize option `columns_duplicates_to_array`\n    if(options.columns_duplicates_to_array === undefined || options.columns_duplicates_to_array === null || options.columns_duplicates_to_array === false){\n      options.columns_duplicates_to_array = false\n    }else if(options.columns_duplicates_to_array !== true){\n      throw new CsvError('CSV_INVALID_OPTION_COLUMNS_DUPLICATES_TO_ARRAY', [\n        'Invalid option columns_duplicates_to_array:',\n        'expect an boolean,',\n        `got ${JSON.stringify(options.columns_duplicates_to_array)}`\n      ], options)\n    }\n    // Normalize option `comment`\n    if(options.comment === undefined || options.comment === null || options.comment === false || options.comment === ''){\n      options.comment = null\n    }else{\n      if(typeof options.comment === 'string'){\n        options.comment = Buffer.from(options.comment, options.encoding)\n      }\n      if(!Buffer.isBuffer(options.comment)){\n        throw new CsvError('CSV_INVALID_OPTION_COMMENT', [\n          'Invalid option comment:',\n          'comment must be a buffer or a string,',\n          `got ${JSON.stringify(options.comment)}`\n        ], options)\n      }\n    }\n    // Normalize option `delimiter`\n    const delimiter_json = JSON.stringify(options.delimiter)\n    if(!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter]\n    if(options.delimiter.length === 0){\n      throw new CsvError('CSV_INVALID_OPTION_DELIMITER', [\n        'Invalid option delimiter:',\n        'delimiter must be a non empty string or buffer or array of string|buffer,',\n        `got ${delimiter_json}`\n      ], options)\n    }\n    options.delimiter = options.delimiter.map(function(delimiter){\n      if(delimiter === undefined || delimiter === null || delimiter === false){\n        return Buffer.from(',', options.encoding)\n      }\n      if(typeof delimiter === 'string'){\n        delimiter = Buffer.from(delimiter, options.encoding)\n      }\n      if( !Buffer.isBuffer(delimiter) || delimiter.length === 0){\n        throw new CsvError('CSV_INVALID_OPTION_DELIMITER', [\n          'Invalid option delimiter:',\n          'delimiter must be a non empty string or buffer or array of string|buffer,',\n          `got ${delimiter_json}`\n        ], options)\n      }\n      return delimiter\n    })\n    // Normalize option `escape`\n    if(options.escape === undefined || options.escape === true){\n      options.escape = Buffer.from('\"', options.encoding)\n    }else if(typeof options.escape === 'string'){\n      options.escape = Buffer.from(options.escape, options.encoding)\n    }else if (options.escape === null || options.escape === false){\n      options.escape = null\n    }\n    if(options.escape !== null){\n      if(!Buffer.isBuffer(options.escape)){\n        throw new Error(`Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`)\n      }\n    }\n    // Normalize option `from`\n    if(options.from === undefined || options.from === null){\n      options.from = 1\n    }else{\n      if(typeof options.from === 'string' && /\\d+/.test(options.from)){\n        options.from = parseInt(options.from)\n      }\n      if(Number.isInteger(options.from)){\n        if(options.from < 0){\n          throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`)\n      }\n    }\n    // Normalize option `from_line`\n    if(options.from_line === undefined || options.from_line === null){\n      options.from_line = 1\n    }else{\n      if(typeof options.from_line === 'string' && /\\d+/.test(options.from_line)){\n        options.from_line = parseInt(options.from_line)\n      }\n      if(Number.isInteger(options.from_line)){\n        if(options.from_line <= 0){\n          throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`)\n      }\n    }\n    // Normalize option `info`\n    if(options.info === undefined || options.info === null || options.info === false){\n      options.info = false\n    }else if(options.info !== true){\n      throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`)\n    }\n    // Normalize option `max_record_size`\n    if(options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false){\n      options.max_record_size = 0\n    }else if(Number.isInteger(options.max_record_size) && options.max_record_size >= 0){\n      // Great, nothing to do\n    }else if(typeof options.max_record_size === 'string' && /\\d+/.test(options.max_record_size)){\n      options.max_record_size = parseInt(options.max_record_size)\n    }else{\n      throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`)\n    }\n    // Normalize option `objname`\n    if(options.objname === undefined || options.objname === null || options.objname === false){\n      options.objname = undefined\n    }else if(Buffer.isBuffer(options.objname)){\n      if(options.objname.length === 0){\n        throw new Error(`Invalid Option: objname must be a non empty buffer`)\n      }\n      if(options.encoding === null){\n        // Don't call `toString`, leave objname as a buffer\n      }else{\n        options.objname = options.objname.toString(options.encoding)\n      }\n    }else if(typeof options.objname === 'string'){\n      if(options.objname.length === 0){\n        throw new Error(`Invalid Option: objname must be a non empty string`)\n      }\n      // Great, nothing to do\n    }else{\n      throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`)\n    }\n    // Normalize option `on_record`\n    if(options.on_record === undefined || options.on_record === null){\n      options.on_record = undefined\n    }else if(typeof options.on_record !== 'function'){\n      throw new CsvError('CSV_INVALID_OPTION_ON_RECORD', [\n        'Invalid option `on_record`:',\n        'expect a function,',\n        `got ${JSON.stringify(options.on_record)}`\n      ], options)\n    }\n    // Normalize option `quote`\n    if(options.quote === null || options.quote === false || options.quote === ''){\n      options.quote = null\n    }else{\n      if(options.quote === undefined || options.quote === true){\n        options.quote = Buffer.from('\"', options.encoding)\n      }else if(typeof options.quote === 'string'){\n        options.quote = Buffer.from(options.quote, options.encoding)\n      }\n      if(!Buffer.isBuffer(options.quote)){\n        throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`)\n      }\n    }\n    // Normalize option `raw`\n    if(options.raw === undefined || options.raw === null || options.raw === false){\n      options.raw = false\n    }else if(options.raw !== true){\n      throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`)\n    }\n    // Normalize option `record_delimiter`\n    if(!options.record_delimiter){\n      options.record_delimiter = []\n    }else if(!Array.isArray(options.record_delimiter)){\n      options.record_delimiter = [options.record_delimiter]\n    }\n    options.record_delimiter = options.record_delimiter.map( function(rd){\n      if(typeof rd === 'string'){\n        rd = Buffer.from(rd, options.encoding)\n      }\n      return rd\n    })\n    // Normalize option `relax`\n    if(typeof options.relax === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax === undefined || options.relax === null){\n      options.relax = false\n    }else{\n      throw new Error(`Invalid Option: relax must be a boolean, got ${JSON.stringify(options.relax)}`)\n    }\n    // Normalize option `relax_column_count`\n    if(typeof options.relax_column_count === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count === undefined || options.relax_column_count === null){\n      options.relax_column_count = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`)\n    }\n    if(typeof options.relax_column_count_less === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count_less === undefined || options.relax_column_count_less === null){\n      options.relax_column_count_less = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`)\n    }\n    if(typeof options.relax_column_count_more === 'boolean'){\n      // Great, nothing to do\n    }else if(options.relax_column_count_more === undefined || options.relax_column_count_more === null){\n      options.relax_column_count_more = false\n    }else{\n      throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`)\n    }\n    // Normalize option `skip_empty_lines`\n    if(typeof options.skip_empty_lines === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_empty_lines === undefined || options.skip_empty_lines === null){\n      options.skip_empty_lines = false\n    }else{\n      throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`)\n    }\n    // Normalize option `skip_lines_with_empty_values`\n    if(typeof options.skip_lines_with_empty_values === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_lines_with_empty_values === undefined || options.skip_lines_with_empty_values === null){\n      options.skip_lines_with_empty_values = false\n    }else{\n      throw new Error(`Invalid Option: skip_lines_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_lines_with_empty_values)}`)\n    }\n    // Normalize option `skip_lines_with_error`\n    if(typeof options.skip_lines_with_error === 'boolean'){\n      // Great, nothing to do\n    }else if(options.skip_lines_with_error === undefined || options.skip_lines_with_error === null){\n      options.skip_lines_with_error = false\n    }else{\n      throw new Error(`Invalid Option: skip_lines_with_error must be a boolean, got ${JSON.stringify(options.skip_lines_with_error)}`)\n    }\n    // Normalize option `rtrim`\n    if(options.rtrim === undefined || options.rtrim === null || options.rtrim === false){\n      options.rtrim = false\n    }else if(options.rtrim !== true){\n      throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`)\n    }\n    // Normalize option `ltrim`\n    if(options.ltrim === undefined || options.ltrim === null || options.ltrim === false){\n      options.ltrim = false\n    }else if(options.ltrim !== true){\n      throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`)\n    }\n    // Normalize option `trim`\n    if(options.trim === undefined || options.trim === null || options.trim === false){\n      options.trim = false\n    }else if(options.trim !== true){\n      throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`)\n    }\n    // Normalize options `trim`, `ltrim` and `rtrim`\n    if(options.trim === true && opts.ltrim !== false){\n      options.ltrim = true\n    }else if(options.ltrim !== true){\n      options.ltrim = false\n    }\n    if(options.trim === true && opts.rtrim !== false){\n      options.rtrim = true\n    }else if(options.rtrim !== true){\n      options.rtrim = false\n    }\n    // Normalize option `to`\n    if(options.to === undefined || options.to === null){\n      options.to = -1\n    }else{\n      if(typeof options.to === 'string' && /\\d+/.test(options.to)){\n        options.to = parseInt(options.to)\n      }\n      if(Number.isInteger(options.to)){\n        if(options.to <= 0){\n          throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`)\n      }\n    }\n    // Normalize option `to_line`\n    if(options.to_line === undefined || options.to_line === null){\n      options.to_line = -1\n    }else{\n      if(typeof options.to_line === 'string' && /\\d+/.test(options.to_line)){\n        options.to_line = parseInt(options.to_line)\n      }\n      if(Number.isInteger(options.to_line)){\n        if(options.to_line <= 0){\n          throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`)\n        }\n      }else{\n        throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`)\n      }\n    }\n    this.info = {\n      comment_lines: 0,\n      empty_lines: 0,\n      invalid_field_length: 0,\n      lines: 1,\n      records: 0\n    }\n    this.options = options\n    this.state = {\n      bomSkipped: false,\n      castField: fnCastField,\n      commenting: false,\n      // Current error encountered by a record\n      error: undefined,\n      enabled: options.from_line === 1,\n      escaping: false,\n      // escapeIsQuote: options.escape === options.quote,\n      escapeIsQuote: Buffer.isBuffer(options.escape) && Buffer.isBuffer(options.quote) && Buffer.compare(options.escape, options.quote) === 0,\n      expectedRecordLength: options.columns === null ? 0 : options.columns.length,\n      field: new ResizeableBuffer(20),\n      firstLineToHeaders: fnFirstLineToHeaders,\n      info: Object.assign({}, this.info),\n      needMoreDataSize: Math.max(\n        // Skip if the remaining buffer smaller than comment\n        options.comment !== null ? options.comment.length : 0,\n        // Skip if the remaining buffer can be delimiter\n        ...options.delimiter.map( (delimiter) => delimiter.length),\n        // Skip if the remaining buffer can be escape sequence\n        options.quote !== null ? options.quote.length : 0,\n      ),\n      previousBuf: undefined,\n      quoting: false,\n      stop: false,\n      rawBuffer: new ResizeableBuffer(100),\n      record: [],\n      recordHasError: false,\n      record_length: 0,\n      recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 2 : Math.max(...options.record_delimiter.map( (v) => v.length)),\n      trimChars: [Buffer.from(' ', options.encoding)[0], Buffer.from('\\t', options.encoding)[0]],\n      wasQuoting: false,\n      wasRowDelimiter: false\n    }\n  }\n  // Implementation of `Transform._transform`\n  _transform(buf, encoding, callback){\n    if(this.state.stop === true){\n      return\n    }\n    const err = this.__parse(buf, false)\n    if(err !== undefined){\n      this.state.stop = true\n    }\n    callback(err)\n  }\n  // Implementation of `Transform._flush`\n  _flush(callback){\n    if(this.state.stop === true){\n      return\n    }\n    const err = this.__parse(undefined, true)\n    callback(err)\n  }\n  // Central parser implementation\n  __parse(nextBuf, end){\n    const {bom, comment, escape, from_line, info, ltrim, max_record_size, quote, raw, relax, rtrim, skip_empty_lines, to, to_line} = this.options\n    let {record_delimiter} = this.options\n    const {bomSkipped, previousBuf, rawBuffer, escapeIsQuote} = this.state\n    let buf\n    if(previousBuf === undefined){\n      if(nextBuf === undefined){\n        // Handle empty string\n        this.push(null)\n        return\n      }else{\n        buf = nextBuf\n      }\n    }else if(previousBuf !== undefined && nextBuf === undefined){\n      buf = previousBuf\n    }else{\n      buf = Buffer.concat([previousBuf, nextBuf])\n    }\n    // Handle UTF BOM\n    if(bomSkipped === false){\n      if(bom === false){\n        this.state.bomSkipped = true\n      }else if(buf.length < 3){\n        // No enough data\n        if(end === false){\n          // Wait for more data\n          this.state.previousBuf = buf\n          return\n        }\n      }else{\n        for(let encoding in boms){\n          if(boms[encoding].compare(buf, 0, boms[encoding].length) === 0){\n            // Skip BOM\n            buf = buf.slice(boms[encoding].length)\n            // Renormalize original options with the new encoding\n            this.__normalizeOptions({...this.__originalOptions, encoding: encoding})\n            break\n          }\n        }\n        this.state.bomSkipped = true\n      }\n    }\n    const bufLen = buf.length\n    let pos\n    for(pos = 0; pos < bufLen; pos++){\n      // Ensure we get enough space to look ahead\n      // There should be a way to move this out of the loop\n      if(this.__needMoreData(pos, bufLen, end)){\n        break\n      }\n      if(this.state.wasRowDelimiter === true){\n        this.info.lines++\n        if(info === true && this.state.record.length === 0 && this.state.field.length === 0 && this.state.wasQuoting === false){\n          this.state.info = Object.assign({}, this.info)\n        }\n        this.state.wasRowDelimiter = false\n      }\n      if(to_line !== -1 && this.info.lines > to_line){\n        this.state.stop = true\n        this.push(null)\n        return\n      }\n      // Auto discovery of record_delimiter, unix, mac and windows supported\n      if(this.state.quoting === false && record_delimiter.length === 0){\n        const record_delimiterCount = this.__autoDiscoverRowDelimiter(buf, pos)\n        if(record_delimiterCount){\n          record_delimiter = this.options.record_delimiter\n        }\n      }\n      const chr = buf[pos]\n      if(raw === true){\n        rawBuffer.append(chr)\n      }\n      if((chr === cr || chr === nl) && this.state.wasRowDelimiter === false ){\n        this.state.wasRowDelimiter = true\n      }\n      // Previous char was a valid escape char\n      // treat the current char as a regular char\n      if(this.state.escaping === true){\n        this.state.escaping = false\n      }else{\n        // Escape is only active inside quoted fields\n        // We are quoting, the char is an escape chr and there is a chr to escape\n        // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){\n        if(escape !== null && this.state.quoting === true && this.__isEscape(buf, pos, chr) && pos + escape.length < bufLen){\n          if(escapeIsQuote){\n            if(this.__isQuote(buf, pos+escape.length)){\n              this.state.escaping = true\n              pos += escape.length - 1\n              continue\n            }\n          }else{\n            this.state.escaping = true\n            pos += escape.length - 1\n            continue\n          }\n        }\n        // Not currently escaping and chr is a quote\n        // TODO: need to compare bytes instead of single char\n        if(this.state.commenting === false && this.__isQuote(buf, pos)){\n          if(this.state.quoting === true){\n            const nextChr = buf[pos+quote.length]\n            const isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr)\n            const isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos+quote.length, nextChr)\n            const isNextChrDelimiter = this.__isDelimiter(buf, pos+quote.length, nextChr)\n            const isNextChrRowDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRowDelimiter(buf, pos+quote.length) : this.__isRecordDelimiter(nextChr, buf, pos+quote.length)\n            // Escape a quote\n            // Treat next char as a regular character\n            if(escape !== null && this.__isEscape(buf, pos, chr) && this.__isQuote(buf, pos + escape.length)){\n              pos += escape.length - 1\n            }else if(!nextChr || isNextChrDelimiter || isNextChrRowDelimiter || isNextChrComment || isNextChrTrimable){\n              this.state.quoting = false\n              this.state.wasQuoting = true\n              pos += quote.length - 1\n              continue\n            }else if(relax === false){\n              const err = this.__error(\n                new CsvError('CSV_INVALID_CLOSING_QUOTE', [\n                  'Invalid Closing Quote:',\n                  `got \"${String.fromCharCode(nextChr)}\"`,\n                  `at line ${this.info.lines}`,\n                  'instead of delimiter, row delimiter, trimable character',\n                  '(if activated) or comment',\n                ], this.options, this.__context())\n              )\n              if(err !== undefined) return err\n            }else{\n              this.state.quoting = false\n              this.state.wasQuoting = true\n              this.state.field.prepend(quote)\n              pos += quote.length - 1\n            }\n          }else{\n            if(this.state.field.length !== 0){\n              // In relax mode, treat opening quote preceded by chrs as regular\n              if( relax === false ){\n                const err = this.__error(\n                  new CsvError('INVALID_OPENING_QUOTE', [\n                    'Invalid Opening Quote:',\n                    `a quote is found inside a field at line ${this.info.lines}`,\n                  ], this.options, this.__context(), {\n                    field: this.state.field,\n                  })\n                )\n                if(err !== undefined) return err\n              }\n            }else{\n              this.state.quoting = true\n              pos += quote.length - 1\n              continue\n            }\n          }\n        }\n        if(this.state.quoting === false){\n          let recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos)\n          if(recordDelimiterLength !== 0){\n            // Do not emit comments which take a full line\n            const skipCommentLine = this.state.commenting && (this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0)\n            if(skipCommentLine){\n              this.info.comment_lines++\n              // Skip full comment line\n            }else{\n              // Skip if line is empty and skip_empty_lines activated\n              if(skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0){\n                this.info.empty_lines++\n                pos += recordDelimiterLength - 1\n                continue\n              }\n              // Activate records emition if above from_line\n              if(this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1: 0 ) >= from_line){\n                this.state.enabled = true\n                this.__resetField()\n                this.__resetRow()\n                pos += recordDelimiterLength - 1\n                continue\n              }else{\n                const errField = this.__onField()\n                if(errField !== undefined) return errField\n                const errRecord = this.__onRow()\n                if(errRecord !== undefined) return errRecord\n              }\n              if(to !== -1 && this.info.records >= to){\n                this.state.stop = true\n                this.push(null)\n                return\n              }\n            }\n            this.state.commenting = false\n            pos += recordDelimiterLength - 1\n            continue\n          }\n          if(this.state.commenting){\n            continue\n          }\n          const commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr)\n          if(commentCount !== 0){\n            this.state.commenting = true\n            continue\n          }\n          let delimiterLength = this.__isDelimiter(buf, pos, chr)\n          if(delimiterLength !== 0){\n            const errField = this.__onField()\n            if(errField !== undefined) return errField\n            pos += delimiterLength - 1\n            continue\n          }\n        }\n      }\n      if(this.state.commenting === false){\n        if(max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size){\n          const err = this.__error(\n            new CsvError('CSV_MAX_RECORD_SIZE', [\n              'Max Record Size:',\n              'record exceed the maximum number of tolerated bytes',\n              `of ${max_record_size}`,\n              `at line ${this.info.lines}`,\n            ], this.options, this.__context())\n          )\n          if(err !== undefined) return err\n        }\n      }\n\n      const lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(chr)\n      // rtrim in non quoting is handle in __onField\n      const rappend = rtrim === false || this.state.wasQuoting === false\n      if( lappend === true && rappend === true ){\n        this.state.field.append(chr)\n      }else if(rtrim === true && !this.__isCharTrimable(chr)){\n        const err = this.__error(\n          new CsvError('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', [\n            'Invalid Closing Quote:',\n            'found non trimable byte after quote',\n            `at line ${this.info.lines}`,\n          ], this.options, this.__context())\n        )\n        if(err !== undefined) return err\n      }\n    }\n    if(end === true){\n      // Ensure we are not ending in a quoting state\n      if(this.state.quoting === true){\n        const err = this.__error(\n          new CsvError('CSV_QUOTE_NOT_CLOSED', [\n            'Quote Not Closed:',\n            `the parsing is finished with an opening quote at line ${this.info.lines}`,\n          ], this.options, this.__context())\n        )\n        if(err !== undefined) return err\n      }else{\n        // Skip last line if it has no characters\n        if(this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0){\n          const errField = this.__onField()\n          if(errField !== undefined) return errField\n          const errRecord = this.__onRow()\n          if(errRecord !== undefined) return errRecord\n        }else if(this.state.wasRowDelimiter === true){\n          this.info.empty_lines++\n        }else if(this.state.commenting === true){\n          this.info.comment_lines++\n        }\n      }\n    }else{\n      this.state.previousBuf = buf.slice(pos)\n    }\n    if(this.state.wasRowDelimiter === true){\n      this.info.lines++\n      this.state.wasRowDelimiter = false\n    }\n  }\n  // Helper to test if a character is a space or a line delimiter\n  __isCharTrimable(chr){\n    return chr === space || chr === tab || chr === cr || chr === nl || chr === np\n  }\n  __onRow(){\n    const {columns, columns_duplicates_to_array, encoding, info, from, relax_column_count, relax_column_count_less, relax_column_count_more, raw, skip_lines_with_empty_values} = this.options\n    const {enabled, record} = this.state\n    if(enabled === false){\n      return this.__resetRow()\n    }\n    // Convert the first line into column names\n    const recordLength = record.length\n    if(columns === true){\n      if(isRecordEmpty(record)){\n        this.__resetRow()\n        return\n      }\n      return this.__firstLineToColumns(record)\n    }\n    if(columns === false && this.info.records === 0){\n      this.state.expectedRecordLength = recordLength\n    }\n    if(recordLength !== this.state.expectedRecordLength){\n      const err = columns === false ?\n        // Todo: rename CSV_INCONSISTENT_RECORD_LENGTH to\n        // CSV_RECORD_INCONSISTENT_FIELDS_LENGTH\n        new CsvError('CSV_INCONSISTENT_RECORD_LENGTH', [\n          'Invalid Record Length:',\n          `expect ${this.state.expectedRecordLength},`,\n          `got ${recordLength} on line ${this.info.lines}`,\n        ], this.options, this.__context(), {\n          record: record,\n        })\n      :\n        // Todo: rename CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH to\n        // CSV_RECORD_INCONSISTENT_COLUMNS\n        new CsvError('CSV_RECORD_DONT_MATCH_COLUMNS_LENGTH', [\n          'Invalid Record Length:',\n          `columns length is ${columns.length},`, // rename columns\n          `got ${recordLength} on line ${this.info.lines}`,\n        ], this.options, this.__context(), {\n          record: record,\n        })\n      if(relax_column_count === true || \n        (relax_column_count_less === true && recordLength < this.state.expectedRecordLength) ||\n        (relax_column_count_more === true && recordLength > this.state.expectedRecordLength) ){\n        this.info.invalid_field_length++\n        this.state.error = err\n      // Error is undefined with skip_lines_with_error\n      }else{\n        const finalErr = this.__error(err)\n        if(finalErr) return finalErr\n      }\n    }\n    if(skip_lines_with_empty_values === true){\n      if(isRecordEmpty(record)){\n        this.__resetRow()\n        return\n      }\n    }\n    if(this.state.recordHasError === true){\n      this.__resetRow()\n      this.state.recordHasError = false\n      return\n    }\n    this.info.records++\n    if(from === 1 || this.info.records >= from){\n      if(columns !== false){\n        const obj = {}\n        // Transform record array to an object\n        for(let i = 0, l = record.length; i < l; i++){\n          if(columns[i] === undefined || columns[i].disabled) continue\n          // Turn duplicate columns into an array\n          if (columns_duplicates_to_array === true && obj[columns[i].name]) {\n            if (Array.isArray(obj[columns[i].name])) {\n              obj[columns[i].name] = obj[columns[i].name].concat(record[i])\n            } else {\n              obj[columns[i].name] = [obj[columns[i].name], record[i]]\n            }\n          } else {\n            obj[columns[i].name] = record[i]\n          }\n        }\n        const {objname} = this.options\n        if(objname === undefined){\n          if(raw === true || info === true){\n            const err = this.__push(Object.assign(\n              {record: obj},\n              (raw === true ? {raw: this.state.rawBuffer.toString(encoding)}: {}),\n              (info === true ? {info: this.state.info}: {})\n            ))\n            if(err){\n              return err\n            }\n          }else{\n            const err = this.__push(obj)\n            if(err){\n              return err\n            }\n          }\n        }else{\n          if(raw === true || info === true){\n            const err = this.__push(Object.assign(\n              {record: [obj[objname], obj]},\n              raw === true ? {raw: this.state.rawBuffer.toString(encoding)}: {},\n              info === true ? {info: this.state.info}: {}\n            ))\n            if(err){\n              return err\n            }\n          }else{\n            const err = this.__push([obj[objname], obj])\n            if(err){\n              return err\n            }\n          }\n        }\n      }else{\n        if(raw === true || info === true){\n          const err = this.__push(Object.assign(\n            {record: record},\n            raw === true ? {raw: this.state.rawBuffer.toString(encoding)}: {},\n            info === true ? {info: this.state.info}: {}\n          ))\n          if(err){\n            return err\n          }\n        }else{\n          const err = this.__push(record)\n          if(err){\n            return err\n          }\n        }\n      }\n    }\n    this.__resetRow()\n  }\n  __firstLineToColumns(record){\n    const {firstLineToHeaders} = this.state\n    try{\n      const headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record)\n      if(!Array.isArray(headers)){\n        return this.__error(\n          new CsvError('CSV_INVALID_COLUMN_MAPPING', [\n            'Invalid Column Mapping:',\n            'expect an array from column function,',\n            `got ${JSON.stringify(headers)}`\n          ], this.options, this.__context(), {\n            headers: headers,\n          })\n        )\n      }\n      const normalizedHeaders = normalizeColumnsArray(headers)\n      this.state.expectedRecordLength = normalizedHeaders.length\n      this.options.columns = normalizedHeaders\n      this.__resetRow()\n      return\n    }catch(err){\n      return err\n    }\n  }\n  __resetRow(){\n    if(this.options.raw === true){\n      this.state.rawBuffer.reset()\n    }\n    this.state.error = undefined\n    this.state.record = []\n    this.state.record_length = 0\n  }\n  __onField(){\n    const {cast, encoding, rtrim, max_record_size} = this.options\n    const {enabled, wasQuoting} = this.state\n    // Short circuit for the from_line options\n    if(enabled === false){ /* this.options.columns !== true && */\n      return this.__resetField()\n    }\n    let field = this.state.field.toString(encoding)\n    if(rtrim === true && wasQuoting === false){\n      field = field.trimRight()\n    }\n    if(cast === true){\n      const [err, f] = this.__cast(field)\n      if(err !== undefined) return err\n      field = f\n    }\n    this.state.record.push(field)\n    // Increment record length if record size must not exceed a limit\n    if(max_record_size !== 0 && typeof field === 'string'){\n      this.state.record_length += field.length\n    }\n    this.__resetField()\n  }\n  __resetField(){\n    this.state.field.reset()\n    this.state.wasQuoting = false\n  }\n  __push(record){\n    const {on_record} = this.options\n    if(on_record !== undefined){\n      const context = this.__context()\n      try{\n        record = on_record.call(null, record, context)\n      }catch(err){\n        return err\n      }\n      if(record === undefined || record === null){ return }\n    }\n    this.push(record)\n  }\n  // Return a tuple with the error and the casted value\n  __cast(field){\n    const {columns, relax_column_count} = this.options\n    const isColumns = Array.isArray(columns)\n    // Dont loose time calling cast\n    // because the final record is an object\n    // and this field can't be associated to a key present in columns\n    if( isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length ){\n      return [undefined, undefined]\n    }\n    const context = this.__context()\n    if(this.state.castField !== null){\n      try{\n        return [undefined, this.state.castField.call(null, field, context)]\n      }catch(err){\n        return [err]\n      }\n    }\n    if(this.__isFloat(field)){\n      return [undefined, parseFloat(field)]\n    }else if(this.options.cast_date !== false){\n      return [undefined, this.options.cast_date.call(null, field, context)]\n    }\n    return [undefined, field]\n  }\n  // Keep it in case we implement the `cast_int` option\n  // __isInt(value){\n  //   // return Number.isInteger(parseInt(value))\n  //   // return !isNaN( parseInt( obj ) );\n  //   return /^(\\-|\\+)?[1-9][0-9]*$/.test(value)\n  // }\n  __isFloat(value){\n    return (value - parseFloat( value ) + 1) >= 0 // Borrowed from jquery\n  }\n  __compareBytes(sourceBuf, targetBuf, targetPos, firstByte){\n    if(sourceBuf[0] !== firstByte) return 0\n    const sourceLength = sourceBuf.length\n    for(let i = 1; i < sourceLength; i++){\n      if(sourceBuf[i] !== targetBuf[targetPos+i]) return 0\n    }\n    return sourceLength\n  }\n  __needMoreData(i, bufLen, end){\n    if(end) return false\n    const {quote} = this.options\n    const {quoting, needMoreDataSize, recordDelimiterMaxLength} = this.state\n    const numOfCharLeft = bufLen - i - 1\n    const requiredLength = Math.max(\n      needMoreDataSize,\n      // Skip if the remaining buffer smaller than record delimiter\n      recordDelimiterMaxLength,\n      // Skip if the remaining buffer can be row delimiter following the closing quote\n      // 1 is for quote.length\n      quoting ? (quote.length + recordDelimiterMaxLength) : 0,\n    )\n    return numOfCharLeft < requiredLength\n  }\n  __isDelimiter(buf, pos, chr){\n    const {delimiter} = this.options\n    loop1: for(let i = 0; i < delimiter.length; i++){\n      const del = delimiter[i]\n      if(del[0] === chr){\n        for(let j = 1; j < del.length; j++){\n          if(del[j] !== buf[pos+j]) continue loop1\n        }\n        return del.length\n      }\n    }\n    return 0\n  }\n  __isRecordDelimiter(chr, buf, pos){\n    const {record_delimiter} = this.options\n    const recordDelimiterLength = record_delimiter.length\n    loop1: for(let i = 0; i < recordDelimiterLength; i++){\n      const rd = record_delimiter[i]\n      const rdLength = rd.length\n      if(rd[0] !== chr){\n        continue\n      }\n      for(let j = 1; j < rdLength; j++){\n        if(rd[j] !== buf[pos+j]){\n          continue loop1\n        }\n      }\n      return rd.length\n    }\n    return 0\n  }\n  __isEscape(buf, pos, chr){\n    const {escape} = this.options\n    if(escape === null) return false\n    const l = escape.length\n    if(escape[0] === chr){\n      for(let i = 0; i < l; i++){\n        if(escape[i] !== buf[pos+i]){\n          return false\n        }\n      }\n      return true\n    }\n    return false\n  }\n  __isQuote(buf, pos){\n    const {quote} = this.options\n    if(quote === null) return false\n    const l = quote.length\n    for(let i = 0; i < l; i++){\n      if(quote[i] !== buf[pos+i]){\n        return false\n      }\n    }\n    return true\n  }\n  __autoDiscoverRowDelimiter(buf, pos){\n    const {encoding} = this.options\n    const chr = buf[pos]\n    if(chr === cr){\n      if(buf[pos+1] === nl){\n        this.options.record_delimiter.push(Buffer.from('\\r\\n', encoding))\n        this.state.recordDelimiterMaxLength = 2\n        return 2\n      }else{\n        this.options.record_delimiter.push(Buffer.from('\\r', encoding))\n        this.state.recordDelimiterMaxLength = 1\n        return 1\n      }\n    }else if(chr === nl){\n      this.options.record_delimiter.push(Buffer.from('\\n', encoding))\n      this.state.recordDelimiterMaxLength = 1\n      return 1\n    }\n    return 0\n  }\n  __error(msg){\n    const {skip_lines_with_error} = this.options\n    const err = typeof msg === 'string' ? new Error(msg) : msg\n    if(skip_lines_with_error){\n      this.state.recordHasError = true\n      this.emit('skip', err)\n      return undefined\n    }else{\n      return err\n    }\n  }\n  __context(){\n    const {columns} = this.options\n    const isColumns = Array.isArray(columns)\n    return {\n      column: isColumns === true ?\n        ( columns.length > this.state.record.length ?\n          columns[this.state.record.length].name :\n          null\n        ) :\n        this.state.record.length,\n      empty_lines: this.info.empty_lines,\n      error: this.state.error,\n      header: columns === true,\n      index: this.state.record.length,\n      invalid_field_length: this.info.invalid_field_length,\n      quoting: this.state.wasQuoting,\n      lines: this.info.lines,\n      records: this.info.records\n    }\n  }\n}\n\nconst parse = function(){\n  let data, options, callback\n  for(let i in arguments){\n    const argument = arguments[i]\n    const type = typeof argument\n    if(data === undefined && (typeof argument === 'string' || Buffer.isBuffer(argument))){\n      data = argument\n    }else if(options === undefined && isObject(argument)){\n      options = argument\n    }else if(callback === undefined && type === 'function'){\n      callback = argument\n    }else{\n      throw new CsvError('CSV_INVALID_ARGUMENT', [\n        'Invalid argument:',\n        `got ${JSON.stringify(argument)} at index ${i}`\n      ], this.options)\n    }\n  }\n  const parser = new Parser(options)\n  if(callback){\n    const records = options === undefined || options.objname === undefined ? [] : {}\n    parser.on('readable', function(){\n      let record\n      while((record = this.read()) !== null){\n        if(options === undefined || options.objname === undefined){\n          records.push(record)\n        }else{\n          records[record[0]] = record[1]\n        }\n      }\n    })\n    parser.on('error', function(err){\n      callback(err, undefined, parser.info)\n    })\n    parser.on('end', function(){\n      callback(undefined, records, parser.info)\n    })\n  }\n  if(data !== undefined){\n    // Give a chance for events to be registered later\n    if(typeof setImmediate === 'function'){\n      setImmediate(function(){\n        parser.write(data)\n        parser.end()\n      })\n    }else{\n      parser.write(data)\n      parser.end()\n    }\n  }\n  return parser\n}\n\nclass CsvError extends Error {\n  constructor(code, message, options, ...contexts) {\n    if(Array.isArray(message)) message = message.join(' ')\n    super(message)\n    if(Error.captureStackTrace !== undefined){\n      Error.captureStackTrace(this, CsvError)\n    }\n    this.code = code\n    for(const context of contexts){\n      for(const key in context){\n        const value = context[key]\n        this[key] = Buffer.isBuffer(value) ? value.toString(options.encoding) : value == null ? value : JSON.parse(JSON.stringify(value))\n      }\n    }\n  }\n}\n\nparse.Parser = Parser\n\nparse.CsvError = CsvError\n\nmodule.exports = parse\n\nconst underscore = function(str){\n  return str.replace(/([A-Z])/g, function(_, match){\n    return '_' + match.toLowerCase()\n  })\n}\n\nconst isObject = function(obj){\n  return (typeof obj === 'object' && obj !== null && !Array.isArray(obj))\n}\n\nconst isRecordEmpty = function(record){\n  return record.every( (field) => field == null || field.toString && field.toString().trim() === '' )\n}\n\nconst normalizeColumnsArray = function(columns){\n  const normalizedColumns = [];\n  for(let i = 0, l = columns.length; i < l; i++){\n    const column = columns[i]\n    if(column === undefined || column === null || column === false){\n      normalizedColumns[i] = { disabled: true }\n    }else if(typeof column === 'string'){\n      normalizedColumns[i] = { name: column }\n    }else if(isObject(column)){\n      if(typeof column.name !== 'string'){\n        throw new CsvError('CSV_OPTION_COLUMNS_MISSING_NAME', [\n          'Option columns missing name:',\n          `property \"name\" is required at position ${i}`,\n          'when column is an object literal'\n        ])\n      }\n      normalizedColumns[i] = column\n    }else{\n      throw new CsvError('CSV_INVALID_COLUMN_DEFINITION', [\n        'Invalid column definition:',\n        'expect a string or a literal object,',\n        `got ${JSON.stringify(column)} at position ${i}`\n      ])\n    }\n  }\n  return normalizedColumns;\n}\n"]},"metadata":{},"sourceType":"script"}